{
    "parser": "@babel/eslint-parser",

    "parserOptions": {
        "ecmaVersion": 6,
        "sourceType": "module"
    },

    "env": {
        "browser": true,
        "node": true,
        "es6": true
    },

    "rules": {
        // 0 = don't warn or error
        // 1 = warn
        // 2 = error
        // arrays indicate options

        // Possible errors
        "comma-dangle": [0, "always-multiline"],
        "no-cond-assign": 2,                // disallow assignment in conditional expressions
        "no-console": 1,                    // disallow use of console (off by default in the node environment)
        "no-constant-condition": 2,         // disallow use of constant expressions in conditions
        "no-control-regex": 2,              // disallow control characters in regular expressions
        "no-debugger": 2,                   // disallow use of debugger
        "no-dupe-args": 2,                  // disallow duplicate arguments in functions
        "no-dupe-keys": 2,                  // disallow duplicate keys when creating object literals
        "no-duplicate-case": 2,             // disallow a duplicate case label.
        "no-empty": 2,                      // disallow empty statements
        "no-empty-character-class": 2,      // disallow the use of empty character classes in regular expressions
        "no-ex-assign": 2,                  // disallow assigning to the exception in a catch block
        "no-extra-boolean-cast": 2,         // disallow double-negation boolean casts in a boolean context
        "no-extra-parens": 0,               // disallow unnecessary parentheses (off by default)
        "no-extra-semi": 2,                 // disallow unnecessary semicolons
        "no-func-assign": 2,                // disallow overwriting functions written as function declarations
        "no-inner-declarations": 0,         // disallow function or variable declarations in nested blocks
        "no-invalid-regexp": 2,             // disallow invalid regular expression strings in the RegExp constructor
        "no-irregular-whitespace": 0,       // disallow irregular whitespace outside of strings and comments
        "no-negated-in-lhs": 2,             // disallow negation of the left operand of an in expression
        "no-obj-calls": 2,                  // disallow the use of object properties of the global object (Math and JSON) as functions
        "no-regex-spaces": 2,               // disallow multiple spaces in a regular expression literal
        "no-sparse-arrays": 2,              // disallow sparse arrays
        "no-unreachable": 2,                // disallow unreachable statements after a return, throw, continue, or break statement
        "use-isnan": 2,                     // disallow comparisons with the value NaN
        "valid-jsdoc": 2,                   // Ensure JSDoc comments are valid (off by default)
        "valid-typeof": 2,                  // Ensure that the results of typeof are compared against a valid string

        "consistent-return": 2,             // require return statements to either always or never specify values
        "curly": 2,                         // specify curly brace conventions for all control statements
        "default-case": 1,                  // require default case in switch statements (off by default)
        "dot-notation": 2,                  // encourages use of dot notation whenever possible
        "eqeqeq": 2,                        // require the use of === and !==
        "guard-for-in": 2,                  // make sure for-in loops have an if statement (off by default)
        "no-alert": 2,                      // disallow the use of alert, confirm, and prompt
        "no-caller": 2,                     // disallow use of arguments.caller or arguments.callee
        "no-div-regex": 2,                  // disallow division operators explicitly at beginning of regular expression (off by default)
        "no-eval": 2,                       // disallow use of eval()
        "no-fallthrough": 1,                // disallow fallthrough of case statements
        "no-implied-eval": 2,               // disallow use of eval()-like methods
        "no-iterator": 2,                   // disallow usage of __iterator__ property
        "no-labels": 2,                     // disallow use of labeled statements
        "no-loop-func": 2,                  // disallow creation of functions within loops
        "no-multi-str": 1,                  // disallow use of multiline strings
        "no-native-reassign": 2,            // disallow reassignments of native objects
        "no-new": 2,                        // disallow use of new operator when not part of the assignment or comparison
        "no-new-func": 2,                   // disallow use of new operator for Function object
        "no-param-reassign": 1,             // disallow reassignment of function parameters (off by default)
        "no-process-env": 0,                // disallow use of process.env (off by default)
        "no-proto": 2,                      // disallow usage of __proto__ property
        "no-redeclare": 2,                  // disallow declaring the same variable more then once
        "no-return-assign": 2,              // disallow use of assignment in return statement
        "no-script-url": 1,                 // disallow use of javascript: urls.
        "no-self-compare": 2,               // disallow comparisons where both sides are exactly the same (off by default)
        "no-throw-literal": 2,              // restrict what can be thrown as an exception (off by default)
        "no-unused-expressions": 0,         // disallow usage of expressions in statement position
        "no-with": 2,                       // disallow use of the with statement
        "radix": 2,                         // require use of the second argument for parseInt() (off by default)
        "vars-on-top": 1,                   // requires to declare all vars on top of their containing scope (off by default)
        "wrap-iife": 2,                     // require immediate function invocation to be wrapped in parentheses (off by default)

        "no-delete-var": 2,                 // disallow deletion of variables
        "no-shadow-restricted-names": 2,    // disallow shadowing of names such as arguments
        "no-undef": 2,                      // disallow use of undeclared variables unless mentioned in a /* global */ block
        "no-unused-vars": 2,                // disallow declaration of variables that are not used in the code
        "no-use-before-define":             // disallow use of variables before they are defined...
            [2, "nofunc"],                  // ...but allow hoisted function declarations


        "brace-style": 1,           // enforce one true brace style (off by default)
        "camelcase": 1,             // require camel case names
        "comma-spacing": [1, {"before": false, "after": true}],
        "eol-last": 2,              // enforce newline at the end of file, with no multiple empty lines
        "func-names": 0,            // require function expressions to have a name (off by default)
        "func-style": 0,            // enforces use of function declarations or expressions (off by default)
        "key-spacing": [1, {
            "beforeColon": false,
            "afterColon": true,
        }],                         // enforces spacing between keys and values in object literal properties
        "new-cap": [1, {
            newIsCap: true,
            capIsNew: false,
        }],                         // require a capital letter for constructors
        "new-parens": 1,            // disallow the omission of parentheses when invoking a constructor with no arguments
        "newline-after-var": 0,     // allow/disallow an empty newline after var statement (off by default)
        "no-array-constructor": 0,  // disallow use of the Array constructor
        "no-lonely-if": 1,          // disallow if as the only statement in an else block (off by default)
        "no-mixed-spaces-and-tabs": 1,
        "no-multiple-empty-lines": [1, {"max": 2}], // disallow multiple empty lines (off by default)
        "no-new-object": 1,         // disallow use of the Object constructor
        "no-spaced-func": 1,        // disallow space between function identifier and application
        "no-ternary": 0,            // disallow the use of ternary operators (off by default)
        "no-trailing-spaces": 2,    // disallow trailing whitespace at the end of lines
        "one-var": 0,               // allow just one var statement per function (off by default)
        "operator-assignment": 0,   // require assignment operator shorthand where possible or prohibit it entirely (off by default)
        "quote-props": 0,           // don't unnecessarily quote string literals in object literals
        "semi": [1, "always"],      // require or disallow use of semicolons instead of ASI
        "semi-spacing": [1, {
            "before": false,
            "after": true,
        }],                         // enforce spacing before and after semicolons
        "keyword-spacing": [1],
        "space-before-blocks": [1, "always"],
        "space-before-function-paren": [0, "never"],    // require or disallow space before function opening parenthesis (off by default)
        "space-in-parens": [1, "never"],
        "space-unary-ops": [1, {
            "words": true,
            "nonwords": false,
        }],
        "spaced-comment":                           // require a space immediately following a comment...
            [1, "always", { exceptions: ["/"] }],   // ...unless it's a banner comment with a bunch of slashes

        // ES6
        "no-var": 2, // require let or const instead of var (off by default)
        "generator-star-spacing": [2, "before"], // enforce the spacing around the * in generator functions (off by default)
        "max-len": [0, 80, 4], // specify the maximum length of a line in your program (off by default)
    }
}
